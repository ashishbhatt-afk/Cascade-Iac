parameters:
  - name: subscription
  - name: environment


jobs:
  - job: Plan_RSV
    steps:
      - task: terraformInstaller@0
        inputs:
          terraformVersion: "latest"

      - template: ../../include-transformjson.yml
        parameters:
          sourcePath: ./params/run.jsonc
          transformations: |
            {
              "envShort": "${{ parameters.environment }}",
            }

      - task: TerraformTaskV4@4
        displayName: "terraform init for ${{ parameters.environment}} RSV"
        inputs:
          provider: "azurerm"
          command: "init"
          workingDirectory: "$(build.sourcesDirectory)/Terraform/backup-rsv"
          commandOptions: >
            -reconfigure
            -var-file="${{ parameters.environment }}.tfvars"
          backendAzureRmUseEnvironmentVariablesForAuthentication: true
          backendServiceArm: "${{ parameters.subscription }}"
          backendAzureRmResourceGroupName: "rg-statefile-poc-cascade"
          backendAzureRmStorageAccountName: "stterraformpocbackend"
          backendAzureRmContainerName: "tfbackend"
          backendAzureRmKey: "$(rsvkey)"

      - task: TerraformTaskV4@4
        displayName: "terraform validate for ${{ parameters.environment }} RSV"
        inputs:
          provider: "azurerm"
          command: "validate"
          workingDirectory: "$(build.sourcesDirectory)/Terraform/backup-rsv"

      - task: TerraformTaskV4@4
        displayName: "terraform plan for ${{ parameters.environment }} RSV"
        inputs:
          provider: "azurerm"
          command: "plan"
          workingDirectory: "$(build.sourcesDirectory)/Terraform/backup-rsv"
          commandOptions: >
            -var-file="${{ parameters.environment }}.tfvars"
            -out RSVtf.plan
          environmentServiceNameAzureRM: "${{ parameters.subscription }}"

        
      - task: TerraformTaskV4@4
        name: TerraformShow
        displayName: Terraform Show
        inputs:
          provider: 'azurerm'
          environmentServiceNameAzureRM: '${{ parameters.subscription }}'
          command: 'show'
          commandOptions: 'RSVtf.plan'
          outputTo: 'file'
          outputFormat: 'json'
          fileName: '$(Build.ArtifactStagingDirectory)/RSVplan.tfgraph'
          workingDirectory: "$(build.sourcesDirectory)/Terraform/IISserver"


      # Publish Plan File as Artifact
      # - task: PublishPipelineArtifact@1
      #   displayName: "Publish Terraform Plan"
      #   inputs:
      #     targetPath: "$(build.sourcesDirectory)/Terraform/backup-rsv/RSVtf.plan"
      #     artifact: 'RSVtf.plan'
      #     publishLocation: 'pipeline'

      # Publish Graph File as Artifact
      - task: PublishPipelineArtifact@1
        displayName: "Publish Terraform Graph"
        inputs:
          targetPath: "$(Build.ArtifactStagingDirectory)/RSVplan.tfgraph"
          artifact: 'RSVplan.tfgraph'
          publishLocation: 'pipeline'

  - job: waitForApproval
    dependsOn: Plan_RSV
    displayName: Manual Validation before terraform_apply
    pool: server
    timeoutInMinutes: 60
    steps:
      - task: ManualValidation@1
        timeoutInMinutes: 60
        inputs:
          notifyUsers: |
            ashish.bhatt@iris.co.uk
          instructions: "Please validate the build configuration and resume"
          onTimeout: "reject"
          allowApproversToApproveTheirOwnRuns: true

  - job: TeraformApply
    dependsOn: waitForApproval
    displayName: "Terraform apply for ${{ parameters.environment }} RSV"
    steps:
      - task: terraformInstaller@0
        inputs:
          terraformVersion: "latest"

      - template: ../../include-transformjson.yml
        parameters:
          sourcePath: ./params/run.jsonc
          transformations: |
            {
              "envShort": "${{ parameters.environment }}",
            }

      - task: TerraformTaskV4@4
        displayName: "terraform init for ${{ parameters.environment}} RSV"
        inputs:
          provider: "azurerm"
          command: "init"
          workingDirectory: "$(build.sourcesDirectory)/Terraform/backup-rsv"
          commandOptions: >
            -reconfigure
            -var-file="${{ parameters.environment }}.tfvars"
          backendAzureRmUseEnvironmentVariablesForAuthentication: true
          backendServiceArm: "${{ parameters.subscription }}"
          backendAzureRmResourceGroupName: "rg-statefile-poc-cascade"
          backendAzureRmStorageAccountName: "stterraformpocbackend"
          backendAzureRmContainerName: "tfbackend"
          backendAzureRmKey: "$(rsvkey)"

      - task: TerraformTaskV4@4
        displayName: "terraform apply for ${{ parameters.environment }} RSV"
        inputs:
          provider: "azurerm"
          command: "apply"
          workingDirectory: "$(build.sourcesDirectory)/Terraform/backup-rsv"
          commandOptions: >
            -auto-approve
            -var-file="${{ parameters.environment }}.tfvars"
          environmentServiceNameAzureRM: "${{ parameters.subscription }}"
